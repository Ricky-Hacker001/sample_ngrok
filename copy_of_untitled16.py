# -*- coding: utf-8 -*-
"""Copy of Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Do-eImlopvazfY8-jOI4vFvWXzQ6f_It
"""

!pip install flask flask-cors pyngrok

import threading
from flask import Flask, jsonify, request
from flask_cors import CORS
from pyngrok import ngrok, conf
import json

# --- IMPORTANT: PASTE YOUR NGROK AUTHTOKEN HERE ---
conf.get_default().auth_token = "your auth token"

app = Flask(__name__)
CORS(app)

# In-memory "database" to store user data. This will be reset on each run.
users = {} # Example: {"username": "password123"}

# --- API Endpoints ---

@app.route("/")
def index():
    return "Colab Backend is Alive!"

@app.route("/api/signup", methods=['POST'])
def signup():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    if not username or not password:
        return jsonify({"status": "error", "message": "Username and password are required"}), 400

    if username in users:
        return jsonify({"status": "error", "message": "Username already exists"}), 409

    # ðŸ›‘ WARNING: Storing passwords in plain text is extremely insecure!
    users[username] = password
    print("Updated users:", users) # For debugging in Colab
    return jsonify({"status": "success", "message": "User created successfully"}), 201


@app.route("/api/login", methods=['POST'])
def login():
    data = request.get_json()
    username = data.get('username')
    password = data.get('password')

    if username in users and users[username] == password:
        # In a real app, you'd generate a secure JWT (JSON Web Token) here.
        # For this demo, we'll use the username as a simple "token".
        return jsonify({"status": "success", "message": "Login successful", "token": username}), 200
    else:
        return jsonify({"status": "error", "message": "Invalid credentials"}), 401


@app.route("/api/dashboard", methods=['GET'])
def dashboard():
    # This is our "protected" route.
    auth_header = request.headers.get('Authorization')
    if not auth_header or not auth_header.startswith('Bearer '):
        return jsonify({"status": "error", "message": "Authorization header missing or invalid"}), 403

    token = auth_header.split(" ")[1]

    # Check if the token (username) is a valid user.
    if token in users:
        # Return some user-specific data.
        return jsonify({
            "message": f"Welcome to your dashboard, {token}!",
            "userData": f"Your lucky number today is {len(token) * 7}."
        }), 200
    else:
        return jsonify({"status": "error", "message": "Invalid token"}), 403

# --- Boilerplate to run Flask and ngrok ---

def run_app():
    app.run(port=5000)

public_url = ngrok.connect(5000)
print(f"ðŸš€ Backend is live at: {public_url}")

flask_thread = threading.Thread(target=run_app)
flask_thread.start()

